import React, { useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import styles from "./index.module.css";

const API_BASE_URL = "https://648607fda795d24810b79f33.mockapi.io";

export const AuthForm = () => {
  const [isRegistering, setIsRegistering] = useState(false);
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");

  const navigate = useNavigate();

  const handleConfirmPasswordChange = (event) => {
    setConfirmPassword(event.target.value);
  };

  const handleUsernameChange = (event) => {
    setUsername(event.target.value);
  };

  const handlePasswordChange = (event) => {
    setPassword(event.target.value);
  };

  const handleToggleMode = () => {
    setIsRegistering((prevMode) => !prevMode);
  };

  const handleSubmit = (event) => {
    event.preventDefault();

    if (isRegistering) {
      // Выполните валидацию
      if (password !== confirmPassword) {
        console.log("Пароли не совпадают");
        // Обработка ошибки несовпадения паролей
        return;
      }

      if (!username || !password) {
        console.log("Пожалуйста, заполните все поля");
        // Обработка ошибки незаполненных полей
        return;
      }

      const userData = { username, password };

      // Отправить запрос на создание нового пользователя
      axios
        .post(`${API_BASE_URL}/users`, userData)
        .then((response) => {
          console.log("Регистрация успешна:", response.data);
          // Дополнительные действия после успешной регистрации

          navigate("/login"); // Переход на страницу авторизации
        })
        .catch((error) => {
          console.error("Ошибка регистрации:", error);
          // Обработка ошибки регистрации
        });
    } else {
      if (!username || !password) {
        console.log("Пожалуйста, заполните все поля");
        // Обработка ошибки незаполненных полей
        return;
      }

      const userData = { username, password };

      // Отправить запрос на получение пользователя по имени пользователя и паролю
      axios
        .get(`${API_BASE_URL}/users`, {
          params: {
            username: userData.username,
            password: userData.password,
          },
        })
        .then((response) => {
          if (response.data.length > 0) {
            console.log("Авторизация успешна:", response.data[0]);
            // Дополнительные действия после успешной авторизации

            navigate("/"); // Переход на главную страницу
          } else {
            console.log("Неверное имя пользователя или пароль");
            // Обработка ошибки авторизации
          }
        })
        .catch((error) => {
          console.error("Ошибка авторизации:", error);
          // Обработка ошибки авторизации
        });
    }
  };

  return (
    <div className={styles.wrapper}>
      <form className={styles.form} onSubmit={handleSubmit}>
        <Link to="/">
          <svg
            className={styles.closeIcon}
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M10 8.586L2.929 1.515 1.515 2.929 8.586 10l-7.071 7.071 1.414 1.414L10 11.414l7.071 7.071 1.414-1.414L11.414 10l7.071-7.071-1.414-1.414L10 8.586z" />
          </svg>
        </Link>
        <h2 className={styles.h2}>{isRegistering ? "Регистрация" : "Авторизация"}</h2>
        <p className={styles.P}>Логин</p>
        <input
          className={styles.Login}
          type="text"
          value={username}
          onChange={handleUsernameChange}
        />
        <p className={styles.P}>Пароль</p>
        <input
          className={styles.Parol}
          type="password"
          value={password}
          onChange={handlePasswordChange}
        />
        {isRegistering && (
          <>
            <p className={styles.P}>Подтверждение пароля</p>
            <input
              className={styles.Parol}
              type="password"
              value={confirmPassword}
              onChange={handleConfirmPasswordChange}
            />
          </>
        )}
        <button className={styles.BtnOk} type="submit">
          {isRegistering ? "Register" : "Login"}
        </button>
        <p>
          {isRegistering ? "Уже есть аккаунт?" : "Нет аккаунта?"}{" "}
          <button type="button" onClick={handleToggleMode}>
            {isRegistering ? "Войти" : "Зарегистрироваться"}
          </button>
        </p>
      </form>
    </div>
  );
};
